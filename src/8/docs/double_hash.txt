Двойное хеширование - это метод разрешения коллизий в хеш-таблицах, который использует два хеш-функции для вычисления индекса элемента в таблице. Этот метод позволяет уменьшить количество коллизий и повысить производительность хеш-таблицы.

**Программа**
```cpp
#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

// Хеш-таблица с двойным хешированием
class HashTable {
private:
    vector<int> table;
    int size;

public:
    HashTable(int size) : size(size), table(size, -1) {}

    // Первая хеш-функция
    int hash1(int key) {
        return key % size;
    }

    // Вторая хеш-функция
    int hash2(int key) {
        return (key / size) % (size - 1) + 1;
    }

    // Двойное хеширование
    int doubleHash(int key, int i) {
        return (hash1(key) + i * hash2(key)) % size;
    }

    // Вставка ключа в хеш-таблицу
    void insert(int key) {
        int index = doubleHash(key, 0);
        int i = 1;
        while (table[index] != -1) {
            index = doubleHash(key, i);
            i++;
        }
        table[index] = key;
    }

    // Поиск ключа в хеш-таблице
    bool search(int key) {
        int index = doubleHash(key, 0);
        int i = 1;
        while (table[index] != key && table[index] != -1) {
            index = doubleHash(key, i);
            i++;
        }
        return table[index] == key;
    }
};

int main() {
    HashTable table(10);

    // Вставка ключей
    table.insert(5);
    table.insert(25);
    table.insert(15);
    table.insert(35);

    // Поиск ключа
    int key = 25;
    if (table.search(key)) {
        cout << "Ключ " << key << " найден!" << endl;
    } else {
        cout << "Ключ " << key << " не найден." << endl;
    }

    return 0;
}
```
**Объяснение**
--------------

Хеш-таблица с двойным хешированием состоит из следующих компонентов:

1.  **Первая хеш-функция**: `hash1` - простая хеш-функция, которая вычисляет индекс ключа по модулю размера таблицы.
2.  **Вторая хеш-функция**: `hash2` - вторая хеш-функция, которая вычисляет индекс ключа по формуле `(key / size) % (size - 1) + 1`.
3.  **Двойное хеширование**: `doubleHash` - функция, которая вычисляет индекс ключа по формуле `(hash1(key) + i * hash2(key)) % size`, где `i` - номер итерации.
4.  **Вставка и поиск ключей**: `insert` и `search` - функции, которые используют двойное хеширование для вставки и поиска ключей в хеш-таблице.

В программе мы создаем хеш-таблицу с размером 10 и вставляем ключи. Затем мы ищем ключ и выводим результат.

Хотите ли вы, чтобы я объяснил какую-либо часть этой программы более подробно?